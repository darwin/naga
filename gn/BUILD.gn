import("//v8/gni/snapshot_toolchain.gni")
import("//v8/gni/v8.gni")

declare_args() {
  naga_verbose_build = false

  naga_disable_feature_cljs = true

  naga_active_log_level = "INFO"

  naga_includes = string_split(getenv("NAGA_INCLUDES"), " ")
  naga_ldflags = string_split(getenv("NAGA_LDFLAGS"), " ")
  naga_root_dir = getenv("NAGA_ROOT_DIR")

  python_includes = string_split(getenv("NAGA_PYTHON_INCLUDES"), " ")
  python_libs = string_split(getenv("NAGA_PYTHON_LIBS"), " ")
  python_ldflags = string_split(getenv("NAGA_PYTHON_LDFLAGS"), " ")
  python_abiflags = getenv("NAGA_PYTHON_ABIFLAGS")

  naga_enable_precompiled_headers = true

  # this is enabled when we are generating compile_commands.json
  naga_gen_compile_commands = false
}

declare_args() {
  # should be true when running with debug build of Python
  # reason: https://github.com/pybind/pybind11/pull/1438
  # we retrieve NAGA_PYTHON_ABIFLAGS via `python3-config --abiflags`
  #   "dm" means debug-multithreaded
  #   "m" means multithreaded (normal release build)
  naga_using_debug_python = python_abiflags == "dm"
}

if (naga_verbose_build) {
  print("using naga_root_dir", naga_root_dir)
  print("using active log level", naga_active_log_level)
  print("using precompiled headers", naga_enable_precompiled_headers)
  print("using disable cljs", naga_disable_feature_cljs)
  print("using naga_includes", naga_includes)
  print("using naga_ldflags", naga_ldflags)
  print("using python_includes", python_includes)
  print("using python_libs", python_libs)
  print("using python_ldflags", python_ldflags)
  print("using python_abiflags", python_abiflags)
}

naga_source_files = [
  "Aux.cpp",
  "IsolateLockerHolder.cpp",
  "JSContext.cpp",
  "JSEngine.cpp",
  "JSEternals.cpp",
  "JSException.cpp",
  "JSHospital.cpp",
  "JSIsolate.cpp",
  "JSIsolateRegistry.cpp",
  "JSLocker.cpp",
  "JSNull.cpp",
  "JSObject.cpp",
  "JSObjectAPI.cpp",
  "JSObjectArrayImpl.cpp",
  "JSObjectBase.cpp",
  "JSObjectCLJSImpl.cpp",
  "JSObjectFunctionImpl.cpp",
  "JSObjectGenericImpl.cpp",
  "JSObjectUtils.cpp",
  "JSPlatform.cpp",
  "JSScript.cpp",
  "JSStackFrame.cpp",
  "JSStackTrace.cpp",
  "JSUndefined.cpp",
  "JSUnlocker.cpp",
  "Logging.cpp",
  "Printing.cpp",
  "PybindExtensions.cpp",
  "PythonDateTime.cpp",
  "PythonExpose.cpp",
  "PythonModule.cpp",
  "PythonObject.cpp",
  "PythonObjectException.cpp",
  "PythonObjectCaller.cpp",
  "PythonObjectIndexed.cpp",
  "PythonObjectNamed.cpp",
  "PythonUtils.cpp",
  "Tracer.cpp",
  "Utils.cpp",
  "V8XLockedIsolate.cpp",
  "V8XProtectedIsolate.cpp",
  "V8XUtils.cpp",
  "Wrapping.cpp",
]

naga_source_file_paths = []

foreach(source, naga_source_files) {
  naga_source_file_paths += [ "$naga_root_dir/src/$source" ]
}

config("naga_precompiled_headers") {
  if (naga_enable_precompiled_headers) {
    if (is_win) {
      # This is a string rather than a file GN knows about. It has to match
      # exactly what's in the /FI flag below, and what might appear in the
      # source code in quotes for an #include directive.
      precompiled_header = "$naga_root_dir/src/__precompile.h"

      # This is a file that GN will compile with the above header. It will be
      # implicitly added to the sources (potentially multiple times, with one
      # variant for each language used in the target).
      precompiled_source = "$naga_root_dir/src/__precompile.cpp"

      # Force include the header.
      cflags = [ "/FI$precompiled_header" ]
    } else if (is_mac) {
      precompiled_source = "$naga_root_dir/src/__precompile.h"
    }
  } else {
    # when we don't use precompiled headers we must ensure that
    # the include order is the same as with precompiled headers
    # -include option puts the include on the first line of each cpp file
    cflags_cc = [ "-include$naga_root_dir/src/__precompile.h" ]
  }
}

config("naga_compiler_flags") {
  cflags = naga_includes
  cflags_cc = [
    "-Wno-c++98-compat-extra-semi",
    "-Wno-error=unused-variable",
    "-Wno-error=unused-function",

    # note CLion uses some unknown pragmas suppressing code hints
    "-Wno-unknown-pragmas",
    "-std=c++17",
  ]
}

config("naga_linker_flags") {
  ldflags = naga_ldflags
}

config("naga_python_compiler_flags") {
  cflags = python_includes

  if (naga_using_debug_python) {
    if (naga_verbose_build) {
      print("using debug python")
    }
    defines = [ "Py_DEBUG" ]
  }
}

config("naga_python_linker_flags") {
  ldflags = python_ldflags
}

config("naga_spdlog_compiler_flags") {
  include_dirs = [ "$naga_root_dir/vendor/spdlog/include" ]
}

config("naga_pybind11_compiler_flags") {
  include_dirs = [ "$naga_root_dir/vendor/pybind11/include" ]
}

config("naga_magic_enum_compiler_flags") {
  include_dirs = [ "$naga_root_dir/vendor/magic_enum/include" ]
}

config("naga_features") {
  defines = []
  if (naga_disable_feature_cljs) {
    defines += [ "NAGA_DISABLE_FEATURE_CLJS" ]
  }
}

config("naga_logging") {
  defines = [ "NAGA_ACTIVE_LOG_LEVEL=$naga_active_log_level" ]
}

source_set("naga_src") {
  sources = naga_source_file_paths

  # don't use the default configs that BUILDCONFIG applied to us.
  configs -= [
    "//build/config/compiler:no_exceptions",
    "//build/config/compiler:no_rtti",

    # google's code conventions are quite strict
    "//build/config/clang:find_bad_constructs",
  ]

  # add some of our own settings...
  configs += [
    ":naga_python_compiler_flags",
    ":naga_compiler_flags",
    ":naga_spdlog_compiler_flags",
    ":naga_pybind11_compiler_flags",
    ":naga_magic_enum_compiler_flags",
    ":naga_features",
    ":naga_logging",
  ]
  if (!naga_gen_compile_commands) {
    # precompiled headers are set via command-line options and this didn't play well with CLion
    # which expects all includes to be visible in the code
    configs += [ ":naga_precompiled_headers" ]
  }

  # this is very important
  # this will ensure our build uses the same headers as V8 build
  # see https://github.com/area1/stpyv8/issues/9
  configs += [ "//v8:external_config" ]

  deps = [ "//v8:v8_headers" ]
}

group("naga_v8") {
  # here we gather our v8 dependencies
  deps = [
    "//v8:v8_monolith",
  ]
}

shared_library("naga") {
  output_extension = "so"

  # add some of our own settings...
  configs += [
    ":naga_python_linker_flags",
    ":naga_linker_flags",
  ]

  deps = [
    ":naga_src",
    ":naga_v8",
  ]
}
